import logging
import os
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv
import openai
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ Railway)
if os.environ.get("RAILWAY_ENVIRONMENT") is None:
    load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# –ö–Ω–æ–ø–∫–∏
menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", callback_data="pay")],
    [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="send_check")],
    [InlineKeyboardButton(text="üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="menu")],
    [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url="https://t.me/mr_admincmd")]
])

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>–í–µ—Ä–∞ –õ–æ–≥–∏–∫</b> ü§ñ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π.\n\n"
        "<b>üìÖ 15 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b>, –ø–æ—Ç–æ–º 25,000 —Å—É–º/–º–µ—Å.\n\n"
        "üí≥ –û–ø–ª–∞—Ç–∞: /pay\n"
        "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫: /send_check\n"
        "üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã: /menu",
        reply_markup=menu_kb
    )

# –ö–æ–º–∞–Ω–¥–∞ /menu
@dp.message_handler(commands=["menu"])
async def menu_handler(message: types.Message):
    await message.answer(
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        "/pay ‚Äî –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å\n"
        "/send_check ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫"
    )

# –ö–æ–º–∞–Ω–¥–∞ /pay
@dp.message_handler(commands=["pay"])
async def pay_handler(message: types.Message):
    await message.answer(
        "üí≥ <b>–û–ø–ª–∞—Ç–∞</b>\n"
        "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 25,000 —Å—É–º –Ω–∞ –∫–∞—Ä—Ç—É: <code>5614 6822 0399 1668</code>\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /send_check"
    )

# –ö–æ–º–∞–Ω–¥–∞ /send_check
@dp.message_handler(commands=["send_check"])
async def send_check_handler(message: types.Message):
    await message.answer("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def receive_check(message: types.Message):
    user_id = message.from_user.id
    photo = message.photo[-1].file_id
    file = await bot.get_file(photo)
    file_path = file.file_path
    file_name = f"check_images/user_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
    await bot.download_file(file_path, file_name)
    await bot.send_message(ADMIN_ID, f"üßæ –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>:")
    await bot.send_photo(ADMIN_ID, photo=photo)
    await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /admin
@dp.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    count = await get_user_count()
    await message.answer(f"üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{count}</b>")

# –ü–æ–¥—Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_user_count():
    conn = sqlite3.connect("subscribers.db")
    cur = conn.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, joined TIMESTAMP)")
    cur.execute("SELECT COUNT(*) FROM users")
    count = cur.fetchone()[0]
    conn.close()
    return count

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def add_user(user_id):
    conn = sqlite3.connect("subscribers.db")
    cur = conn.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, joined TIMESTAMP)")
    cur.execute("INSERT OR IGNORE INTO users (user_id, joined) VALUES (?, ?)", (user_id, datetime.now()))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –∑–∞–¥–∞—á–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler()
async def solve_math(message: types.Message):
    if message.text.startswith("/"):
        return
    await add_user(message.from_user.id)
    try:
        resp = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–µ–ª—É –∏ —Å –ø–æ—à–∞–≥–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏–µ–º."},
                {"role": "user", "content": message.text}
            ]
        )
        reply = resp.choices[0].message.content
        await message.answer(f"{reply}\n\nüë©üèª‚Äçüè´ <i>–° —Ç–æ–±–æ–π –±—ã–ª–∞ –í–µ—Ä–∞ –õ–æ–≥–∏–∫</i>")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
