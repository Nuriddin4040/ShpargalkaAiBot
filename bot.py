import logging
import asyncio
import os
import aiosqlite
from openai import AsyncOpenAI
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.client.default import DefaultBotProperties

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º
menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url="https://t.me/mr_admincmd")]
])

# –ü—Ä–æ–º—Ç GPT-4
PROMPT = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. –£—Å–ª–æ–≤–∏–µ.
2. –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.
3. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.
–û–±—ä—è—Å–Ω—è–π —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–Ω—è–ª –¥–∞–∂–µ –Ω–æ–≤–∏—á–æ–∫."""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async def init_db():
    async with aiosqlite.connect("users.db") as db:
        await db.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY)")
        await db.commit()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def save_user(user_id: int):
    async with aiosqlite.connect("users.db") as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        await db.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def count_users():
    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT COUNT(*) FROM users") as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 0

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await save_user(message.from_user.id)
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç, —è –í–µ—Ä–∞ –õ–æ–≥–∏–∫ ‚Äî —Ç–≤–æ–π AI-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ üß†</b>\n\n–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–µ—à–∏—Ç—å –µ—ë –ø–æ—à–∞–≥–æ–≤–æ.",
        reply_markup=menu_kb
    )

# –ö–æ–º–∞–Ω–¥–∞ /admin
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
    count = await count_users()
    panel = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="send_broadcast")]
    ])
    await message.answer(f"<b>üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\nüìä –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{count}</b>", reply_markup=panel)

# –ü—Ä–∏—ë–º –∫–æ–º–∞–Ω–¥—ã /send
@dp.callback_query(F.data == "send_broadcast")
async def start_broadcast(callback):
    if callback.from_user.id != ADMIN_ID:
        return
    await callback.message.answer("‚úèÔ∏è –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.")
    dp.workflow_data["awaiting_broadcast"] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(F.text)
async def handle_text(message: Message):
    # –ê–¥–º–∏–Ω –¥–µ–ª–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É
    if dp.workflow_data.get("awaiting_broadcast") and message.from_user.id == ADMIN_ID:
        dp.workflow_data["awaiting_broadcast"] = False
        async with aiosqlite.connect("users.db") as db:
            async with db.execute("SELECT user_id FROM users") as cursor:
                users = await cursor.fetchall()
                for user in users:
                    try:
                        await bot.send_message(user[0], message.text)
                    except Exception:
                        continue
        return await message.answer("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    # GPT-4: —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await message.answer("–ü–æ–Ω—è–ª–∞, —Ä–µ—à–∞—é –∑–∞–¥–∞—á—É... üß†")
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": PROMPT},
                {"role": "user", "content": message.text}
            ]
        )
        await message.answer(response.choices[0].message.content.strip())
    except Exception as e:
        logging.error(e)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT-4. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
