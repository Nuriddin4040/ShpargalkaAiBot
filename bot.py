import os
import logging
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import openai
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ Railway Variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("users.db")
cur = conn.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS subscribers (
        user_id INTEGER PRIMARY KEY,
        start_date TEXT,
        is_pro INTEGER DEFAULT 0,
        paid_until TEXT
    )
''')
conn.commit()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def has_access(user_id):
    cur.execute("SELECT start_date, is_pro, paid_until FROM subscribers WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if row:
        start_date_str, is_pro, paid_until_str = row
        if is_pro and paid_until_str:
            return datetime.now().date() <= datetime.strptime(paid_until_str, "%Y-%m-%d").date()
        elif start_date_str:
            start = datetime.strptime(start_date_str, "%Y-%m-%d").date()
            return (datetime.now().date() - start).days <= 15
    return False


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    cur.execute("SELECT * FROM subscribers WHERE user_id = ?", (user_id,))
    if not cur.fetchone():
        cur.execute("INSERT INTO subscribers (user_id, start_date) VALUES (?, ?)",
                    (user_id, datetime.now().strftime("%Y-%m-%d")))
        conn.commit()

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>–í–µ—Ä–∞ –õ–æ–≥–∏–∫</b> ü§ñ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.\n\n"
        "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ 15 –¥–Ω–µ–π, –∑–∞—Ç–µ–º –ø–æ–¥–ø–∏—Å–∫–∞: 25 000 —Å—É–º/–º–µ—Å.\n"
        "üí∏ –ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å ‚Äî /pay\n"
        "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ ‚Äî /send_check\n"
        "üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ ‚Äî /menu"
    )


# –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=["menu"])
async def cmd_menu(message: types.Message):
    await message.answer(
        "<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        "/pay ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ\n"
        "/send_check ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞\n"
        "/admin ‚Äî –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"
    )


# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ
@dp.message_handler(commands=["pay"])
async def cmd_pay(message: types.Message):
    await message.answer(
        "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏ <b>25,000 —Å—É–º</b> –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "<code>5614 6822 0399 1668</code>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞ —á–µ—Ä–µ–∑ /send_check"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞
@dp.message_handler(commands=["send_check"])
async def cmd_send_check(message: types.Message):
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —á–µ–∫–∞ –ø—Ä—è–º–æ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—á–µ–∫–∞)
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    file_id = message.photo[-1].file_id
    await bot.send_photo(ADMIN_ID, file_id, caption=f"üì§ –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: /approve {user_id}")
    await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")


# –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É
@dp.message_handler(commands=["approve"])
async def cmd_approve(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        until = datetime.now() + timedelta(days=30)
        cur.execute("UPDATE subscribers SET is_pro = 1, paid_until = ? WHERE user_id = ?", (until.strftime("%Y-%m-%d"), user_id))
        conn.commit()
        await bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{until.strftime('%Y-%m-%d')}</b>")
        await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
@dp.message_handler(commands=["admin"])
async def cmd_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    cur.execute("SELECT COUNT(*) FROM subscribers")
    total = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM subscribers WHERE is_pro = 1")
    pro = cur.fetchone()[0]
    await message.answer(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\nüíé –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ PRO: {pro}")


# –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
@dp.message_handler(lambda m: not m.text.startswith("/"))
async def handle_task(message: types.Message):
    user_id = message.from_user.id
    if not has_access(user_id):
        await message.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ /pay –∏ –æ—Ç–ø—Ä–∞–≤—å —á–µ–∫ —á–µ—Ä–µ–∑ /send_check")
        return
    prompt = f"–¢—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ:\n{message.text}"
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        reply = response.choices[0].message.content
        await message.answer(f"{reply}\n\n‚Äî <i>–í–µ—Ä–∞ –õ–æ–≥–∏–∫</i> ü§ñ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {e}")


# üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def reminder_loop():
    while True:
        cur.execute("SELECT user_id, start_date, is_pro, paid_until FROM subscribers")
        users = cur.fetchall()
        for user_id, start_date_str, is_pro, paid_until_str in users:
            if is_pro == 0 and start_date_str:
                start = datetime.strptime(start_date_str, "%Y-%m-%d").date()
                days_used = (datetime.now().date() - start).days
                if days_used == 13:
                    try:
                        await bot.send_message(user_id, "‚è≥ –ó–∞–≤—Ç—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ /pay –∏ –æ—Ç–ø—Ä–∞–≤—å —á–µ–∫.")
                    except:
                        pass
        await asyncio.sleep(86400)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(reminder_loop())
    executor.start_polling(dp, skip_updates=True)
