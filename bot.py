import os
import sqlite3
import openai
import logging
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
load_dotenv()
TELEGRAM_TOKEN = "7809028777:AAE8ez2suhZGe38HOKWEEr04qNldlkpAK5Q"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "1754012821"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
openai.api_key = OPENAI_API_KEY
DB_PATH = "subscribers.db"
CHECK_DIR = "check_images"
os.makedirs(CHECK_DIR, exist_ok=True)

# FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class Broadcast(StatesGroup):
    waiting_for_message = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_PATH)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS subscribers (
            user_id INTEGER PRIMARY KEY,
            start_date TEXT,
            is_pro INTEGER DEFAULT 0,
            paid_until TEXT
        )
    """)
    conn.commit()
    conn.close()

# /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT * FROM subscribers WHERE user_id = ?", (user_id,))
    if not cur.fetchone():
        cur.execute("INSERT INTO subscribers(user_id, start_date) VALUES (?, ?)", (user_id, datetime.date.today().isoformat()))
    conn.commit()
    conn.close()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>–í–µ—Ä–∞ –õ–æ–≥–∏–∫</b> ü§ñ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π.\n\n"
        "üìÖ <b>15 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b>, –ø–æ—Ç–æ–º 25,000 —Å—É–º/–º–µ—Å.\n\n"
        "üì∏ –û–ø–ª–∞—Ç–∞: /pay\nüßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫: /send_check\nüìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã: /menu",
        reply_markup=keyboard
    )

# /menu
@dp.message_handler(commands=['menu'])
async def cmd_menu(message: types.Message):
    await message.answer(
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        "/pay ‚Äî –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å\n"
        "/send_check ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫"
    )

# /admin
@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    conn = sqlite3.connect(DB_PATH)
    count = conn.execute("SELECT COUNT(*) FROM subscribers").fetchone()[0]
    conn.close()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì£ –†–∞—Å—Å—ã–ª–∫–∞")
    await message.answer(f"üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}", reply_markup=keyboard)

# –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
@dp.message_handler(lambda m: m.text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞")
async def ask_broadcast_text(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:")
    await Broadcast.waiting_for_message.set()

@dp.message_handler(state=Broadcast.waiting_for_message, content_types=types.ContentTypes.TEXT)
async def process_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await state.finish()
        return
    text = message.text
    conn = sqlite3.connect(DB_PATH)
    users = conn.execute("SELECT user_id FROM subscribers").fetchall()
    conn.close()
    count = 0
    for (uid,) in users:
        try:
            await bot.send_message(uid, text)
            count += 1
        except:
            continue
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}")
    await state.finish()

# /pay
@dp.message_handler(commands=["pay"])
async def pay_info(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üí≥ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="copy_card"))
    await message.answer(
        "üíµ –û–ø–ª–∞—Ç–∞ 25,000 —Å—É–º –Ω–∞ –∫–∞—Ä—Ç—É:\n<code>5614 6822 0399 1668</code>\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî /send_check",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "copy_card")
async def copy_card(callback: types.CallbackQuery):
    await callback.answer("–ö–∞—Ä—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: 5614 6822 0399 1668", show_alert=True)

# /send_check
@dp.message_handler(commands=['send_check'])
async def send_check(message: types.Message):
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    user_id = message.from_user.id
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"user_{user_id}_{timestamp}.jpg"
    await bot.download_file(file.file_path, f"{CHECK_DIR}/{filename}")
    await message.reply("‚úÖ –ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –∞–¥–º–∏–Ω —Å–∫–æ—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç")
    await bot.send_message(ADMIN_ID, f"üì• –ß–µ–∫ –æ—Ç {user_id}: {filename}")

# /approve
@dp.message_handler(commands=['approve'])
async def approve_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 2:
        return await message.reply("–§–æ—Ä–º–∞—Ç: /approve <user_id>")
    user_id = int(parts[1])
    paid_until = (datetime.date.today() + datetime.timedelta(days=30)).isoformat()
    conn = sqlite3.connect(DB_PATH)
    conn.execute("UPDATE subscribers SET is_pro = 1, paid_until = ? WHERE user_id = ?", (paid_until, user_id))
    conn.commit()
    conn.close()
    await bot.send_message(user_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {paid_until}")
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def has_access(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT start_date, is_pro, paid_until FROM subscribers WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    if not row:
        return False
    start_date, is_pro, paid_until = row
    today = datetime.date.today()
    if is_pro == 1 and paid_until:
        return today <= datetime.date.fromisoformat(paid_until)
    return (today - datetime.date.fromisoformat(start_date)).days <= 15

# –û—Ç–≤–µ—Ç –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É
@dp.message_handler(lambda m: m.text and not m.text.startswith('/'), state=None)
async def handle_math(message: types.Message):
    user_id = message.from_user.id
    if not has_access(user_id):
        return await message.reply("üîí –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç. –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ /pay –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ /send_check")
    try:
        resp = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –î–∞–π –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ."},
                {"role": "user", "content": message.text}
            ]
        )
        ai_text = resp.choices[0].message.content.strip()
        await message.reply(f"üìò <b>–û—Ç–≤–µ—Ç:</b>\n\n<pre>{ai_text}</pre>", parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ—Ç –ò–ò")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)
